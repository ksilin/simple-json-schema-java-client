/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example;

import com.fasterxml.jackson.databind.JsonNode;
import io.confluent.kafka.serializers.json.KafkaJsonSchemaDeserializer;
import io.confluent.kafka.serializers.json.KafkaJsonSchemaDeserializerConfig;
import org.apache.kafka.clients.CommonClientConfigs;
import org.apache.kafka.clients.consumer.*;
import org.apache.kafka.common.config.SaslConfigs;

import java.io.FileInputStream;
import java.io.IOException;
import java.time.Duration;
import java.util.Collections;
import java.util.List;
import java.util.Properties;

public class ConsumerApp {
    public String getGreeting() {
        return "Hello World!";
    }

    private volatile boolean keepConsuming = true;
    private Consumer<String, String> consumer;

    public ConsumerApp(final Consumer<String, String> consumer ) {
        this.consumer = consumer;
    }

    public void runConsume(final Properties consumerProps) {
        try {
            consumer.subscribe(Collections.singletonList(consumerProps.getProperty("input.topic.name")));
            while (keepConsuming) {
                final ConsumerRecords<String, String> consumerRecords = consumer.poll(Duration.ofSeconds(1));
                process(consumerRecords);
            }
        } finally {
            consumer.close();
        }
    }

    public void process(final ConsumerRecords<String, String> consumerRecords) {
        consumerRecords.forEach(System.out::println);
    }

    public void shutdown() {
        keepConsuming = false;
    }

    public static Properties loadProperties(String fileName) throws IOException {
        final Properties props = new Properties();
        final FileInputStream input = new FileInputStream(fileName);
        props.load(input);
        input.close();
        return props;
    }


    public static void main(String[] args) {

        final Properties props = new Properties();

        String bootstrap = System.getenv("BOOTSTRAP");
        String kafkaKey = System.getenv("KAFKA_KEY");
        String kafkaSecret = System.getenv("KAFKA_SECRET");
        String srBasicAuth = System.getenv("SR_BASIC_AUTH");
        String schemaID = System.getenv("SCHEMA_ID");
        String topic = System.getenv("TOPIC");

        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrap);

        props.put(ConsumerConfig.GROUP_ID_CONFIG, "json-schema-consumer");
        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, "true");
        props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, "1000");
        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");

        props.put("ssl.endpoint.identification.algorithm", "https");
        props.put(SaslConfigs.SASL_MECHANISM, "PLAIN");

        props.put(SaslConfigs.SASL_JAAS_CONFIG, "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"" + kafkaKey + "\" password=\"" + kafkaSecret + "\";");
        props.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, "SASL_SSL");

        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringDeserializer");
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, KafkaJsonSchemaDeserializer.class);
        props.put(KafkaJsonSchemaDeserializerConfig.AUTO_REGISTER_SCHEMAS, false);
        props.put(KafkaJsonSchemaDeserializerConfig.USE_SCHEMA_ID, schemaID);
        props.put(KafkaJsonSchemaDeserializerConfig.JSON_VALUE_TYPE, JsonNode.class.getName());

        props.put("schema.registry.url", "https://psrc-lgkvv.europe-west3.gcp.confluent.cloud");
        props.put("basic.auth.credentials.source", "USER_INFO");
        props.put("schema.registry.basic.auth.user.info", srBasicAuth);

        System.out.println("initializing consumer");
        try (final KafkaConsumer<String, JsonNode> consumer = new KafkaConsumer<>(props)) {
            consumer.subscribe(List.of(topic));
            System.out.println("starting consumer");

            while (true) {
                final ConsumerRecords<String, JsonNode> records = consumer.poll(Duration.ofMillis(100));
                System.out.println("polling");
                for (final ConsumerRecord<String, JsonNode> record : records) {
                    final String key = record.key();
                    final JsonNode value = record.value();
                    System.out.printf("key = %s, value = %s%n", key, value);
                }
            }
        }
    }
}
